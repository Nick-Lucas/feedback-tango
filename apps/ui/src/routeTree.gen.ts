/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SigninRouteImport } from './routes/signin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsIndexRouteImport } from './routes/projects.index'
import { Route as CliSigninRouteImport } from './routes/cli.signin'
import { Route as ApiAuthRouteImport } from './routes/api.auth'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects.$projectId.index'
import { Route as ProjectsProjectIdFeaturesRouteImport } from './routes/projects.$projectId.features'
import { Route as ProjectsProjectIdConfigRouteImport } from './routes/projects.$projectId.config'
import { Route as CliSigninCompleteRouteImport } from './routes/cli.signin.complete'
import { Route as ProjectsProjectIdFeaturesIndexRouteImport } from './routes/projects.$projectId.features.index'
import { Route as ProjectsProjectIdFeaturesFeatureIdRouteImport } from './routes/projects.$projectId.features.$featureId'

const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsIndexRoute = ProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRouteImport,
} as any)
const CliSigninRoute = CliSigninRouteImport.update({
  id: '/cli/signin',
  path: '/cli/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthRoute = ApiAuthRouteImport.update({
  id: '/api/auth',
  path: '/api/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/projects/$projectId/',
  path: '/projects/$projectId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdFeaturesRoute =
  ProjectsProjectIdFeaturesRouteImport.update({
    id: '/projects/$projectId/features',
    path: '/projects/$projectId/features',
    getParentRoute: () => rootRouteImport,
  } as any)
const ProjectsProjectIdConfigRoute = ProjectsProjectIdConfigRouteImport.update({
  id: '/projects/$projectId/config',
  path: '/projects/$projectId/config',
  getParentRoute: () => rootRouteImport,
} as any)
const CliSigninCompleteRoute = CliSigninCompleteRouteImport.update({
  id: '/complete',
  path: '/complete',
  getParentRoute: () => CliSigninRoute,
} as any)
const ProjectsProjectIdFeaturesIndexRoute =
  ProjectsProjectIdFeaturesIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProjectsProjectIdFeaturesRoute,
  } as any)
const ProjectsProjectIdFeaturesFeatureIdRoute =
  ProjectsProjectIdFeaturesFeatureIdRouteImport.update({
    id: '/$featureId',
    path: '/$featureId',
    getParentRoute: () => ProjectsProjectIdFeaturesRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/api/auth': typeof ApiAuthRoute
  '/cli/signin': typeof CliSigninRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/cli/signin/complete': typeof CliSigninCompleteRoute
  '/projects/$projectId/config': typeof ProjectsProjectIdConfigRoute
  '/projects/$projectId/features': typeof ProjectsProjectIdFeaturesRouteWithChildren
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/features/$featureId': typeof ProjectsProjectIdFeaturesFeatureIdRoute
  '/projects/$projectId/features/': typeof ProjectsProjectIdFeaturesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/api/auth': typeof ApiAuthRoute
  '/cli/signin': typeof CliSigninRouteWithChildren
  '/projects': typeof ProjectsIndexRoute
  '/cli/signin/complete': typeof CliSigninCompleteRoute
  '/projects/$projectId/config': typeof ProjectsProjectIdConfigRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/features/$featureId': typeof ProjectsProjectIdFeaturesFeatureIdRoute
  '/projects/$projectId/features': typeof ProjectsProjectIdFeaturesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/api/auth': typeof ApiAuthRoute
  '/cli/signin': typeof CliSigninRouteWithChildren
  '/projects/': typeof ProjectsIndexRoute
  '/cli/signin/complete': typeof CliSigninCompleteRoute
  '/projects/$projectId/config': typeof ProjectsProjectIdConfigRoute
  '/projects/$projectId/features': typeof ProjectsProjectIdFeaturesRouteWithChildren
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
  '/projects/$projectId/features/$featureId': typeof ProjectsProjectIdFeaturesFeatureIdRoute
  '/projects/$projectId/features/': typeof ProjectsProjectIdFeaturesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/signin'
    | '/api/auth'
    | '/cli/signin'
    | '/projects'
    | '/cli/signin/complete'
    | '/projects/$projectId/config'
    | '/projects/$projectId/features'
    | '/projects/$projectId'
    | '/projects/$projectId/features/$featureId'
    | '/projects/$projectId/features/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/api/auth'
    | '/cli/signin'
    | '/projects'
    | '/cli/signin/complete'
    | '/projects/$projectId/config'
    | '/projects/$projectId'
    | '/projects/$projectId/features/$featureId'
    | '/projects/$projectId/features'
  id:
    | '__root__'
    | '/'
    | '/signin'
    | '/api/auth'
    | '/cli/signin'
    | '/projects/'
    | '/cli/signin/complete'
    | '/projects/$projectId/config'
    | '/projects/$projectId/features'
    | '/projects/$projectId/'
    | '/projects/$projectId/features/$featureId'
    | '/projects/$projectId/features/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SigninRoute: typeof SigninRoute
  ApiAuthRoute: typeof ApiAuthRoute
  CliSigninRoute: typeof CliSigninRouteWithChildren
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  ProjectsProjectIdConfigRoute: typeof ProjectsProjectIdConfigRoute
  ProjectsProjectIdFeaturesRoute: typeof ProjectsProjectIdFeaturesRouteWithChildren
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cli/signin': {
      id: '/cli/signin'
      path: '/cli/signin'
      fullPath: '/cli/signin'
      preLoaderRoute: typeof CliSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth': {
      id: '/api/auth'
      path: '/api/auth'
      fullPath: '/api/auth'
      preLoaderRoute: typeof ApiAuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/features': {
      id: '/projects/$projectId/features'
      path: '/projects/$projectId/features'
      fullPath: '/projects/$projectId/features'
      preLoaderRoute: typeof ProjectsProjectIdFeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/config': {
      id: '/projects/$projectId/config'
      path: '/projects/$projectId/config'
      fullPath: '/projects/$projectId/config'
      preLoaderRoute: typeof ProjectsProjectIdConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cli/signin/complete': {
      id: '/cli/signin/complete'
      path: '/complete'
      fullPath: '/cli/signin/complete'
      preLoaderRoute: typeof CliSigninCompleteRouteImport
      parentRoute: typeof CliSigninRoute
    }
    '/projects/$projectId/features/': {
      id: '/projects/$projectId/features/'
      path: '/'
      fullPath: '/projects/$projectId/features/'
      preLoaderRoute: typeof ProjectsProjectIdFeaturesIndexRouteImport
      parentRoute: typeof ProjectsProjectIdFeaturesRoute
    }
    '/projects/$projectId/features/$featureId': {
      id: '/projects/$projectId/features/$featureId'
      path: '/$featureId'
      fullPath: '/projects/$projectId/features/$featureId'
      preLoaderRoute: typeof ProjectsProjectIdFeaturesFeatureIdRouteImport
      parentRoute: typeof ProjectsProjectIdFeaturesRoute
    }
  }
}

interface CliSigninRouteChildren {
  CliSigninCompleteRoute: typeof CliSigninCompleteRoute
}

const CliSigninRouteChildren: CliSigninRouteChildren = {
  CliSigninCompleteRoute: CliSigninCompleteRoute,
}

const CliSigninRouteWithChildren = CliSigninRoute._addFileChildren(
  CliSigninRouteChildren,
)

interface ProjectsProjectIdFeaturesRouteChildren {
  ProjectsProjectIdFeaturesFeatureIdRoute: typeof ProjectsProjectIdFeaturesFeatureIdRoute
  ProjectsProjectIdFeaturesIndexRoute: typeof ProjectsProjectIdFeaturesIndexRoute
}

const ProjectsProjectIdFeaturesRouteChildren: ProjectsProjectIdFeaturesRouteChildren =
  {
    ProjectsProjectIdFeaturesFeatureIdRoute:
      ProjectsProjectIdFeaturesFeatureIdRoute,
    ProjectsProjectIdFeaturesIndexRoute: ProjectsProjectIdFeaturesIndexRoute,
  }

const ProjectsProjectIdFeaturesRouteWithChildren =
  ProjectsProjectIdFeaturesRoute._addFileChildren(
    ProjectsProjectIdFeaturesRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SigninRoute: SigninRoute,
  ApiAuthRoute: ApiAuthRoute,
  CliSigninRoute: CliSigninRouteWithChildren,
  ProjectsIndexRoute: ProjectsIndexRoute,
  ProjectsProjectIdConfigRoute: ProjectsProjectIdConfigRoute,
  ProjectsProjectIdFeaturesRoute: ProjectsProjectIdFeaturesRouteWithChildren,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
